// Code generated by MockGen. DO NOT EDIT.
// Source: set_pack_sizes.go

// Package command is a generated GoMock package.
package command

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/rossi1/smart-pack/domain"
)

// MockSetPackSizesRepository is a mock of SetPackSizesRepository interface.
type MockSetPackSizesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSetPackSizesRepositoryMockRecorder
}

// MockSetPackSizesRepositoryMockRecorder is the mock recorder for MockSetPackSizesRepository.
type MockSetPackSizesRepositoryMockRecorder struct {
	mock *MockSetPackSizesRepository
}

// NewMockSetPackSizesRepository creates a new mock instance.
func NewMockSetPackSizesRepository(ctrl *gomock.Controller) *MockSetPackSizesRepository {
	mock := &MockSetPackSizesRepository{ctrl: ctrl}
	mock.recorder = &MockSetPackSizesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetPackSizesRepository) EXPECT() *MockSetPackSizesRepositoryMockRecorder {
	return m.recorder
}

// SetPackSizes mocks base method.
func (m *MockSetPackSizesRepository) SetPackSizes(ctx context.Context, sizes []domain.SmartPack) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPackSizes", ctx, sizes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPackSizes indicates an expected call of SetPackSizes.
func (mr *MockSetPackSizesRepositoryMockRecorder) SetPackSizes(ctx, sizes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPackSizes", reflect.TypeOf((*MockSetPackSizesRepository)(nil).SetPackSizes), ctx, sizes)
}
