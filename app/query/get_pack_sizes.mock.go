// Code generated by MockGen. DO NOT EDIT.
// Source: get_pack_sizes.go

// Package query is a generated GoMock package.
package query

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/rossi1/smart-pack/domain"
)

// MockGetPackSizesRepository is a mock of GetPackSizesRepository interface.
type MockGetPackSizesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetPackSizesRepositoryMockRecorder
}

// MockGetPackSizesRepositoryMockRecorder is the mock recorder for MockGetPackSizesRepository.
type MockGetPackSizesRepositoryMockRecorder struct {
	mock *MockGetPackSizesRepository
}

// NewMockGetPackSizesRepository creates a new mock instance.
func NewMockGetPackSizesRepository(ctrl *gomock.Controller) *MockGetPackSizesRepository {
	mock := &MockGetPackSizesRepository{ctrl: ctrl}
	mock.recorder = &MockGetPackSizesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetPackSizesRepository) EXPECT() *MockGetPackSizesRepositoryMockRecorder {
	return m.recorder
}

// GetPackSizes mocks base method.
func (m *MockGetPackSizesRepository) GetPackSizes(ctx context.Context) ([]domain.SmartPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackSizes", ctx)
	ret0, _ := ret[0].([]domain.SmartPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackSizes indicates an expected call of GetPackSizes.
func (mr *MockGetPackSizesRepositoryMockRecorder) GetPackSizes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackSizes", reflect.TypeOf((*MockGetPackSizesRepository)(nil).GetPackSizes), ctx)
}
